<ui:DialogWindow x:Class="PrivateDeveloperInc.GuidFac.GuidFacWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:platformUI="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0"
    xmlns:vsshell="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.15.0"
    xmlns:ui="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0"
    Background="Transparent"
    AllowsTransparency="True"
    ShowInTaskbar="False"
    PreviewKeyDown="OnPreviewKeyDown"
    KeyUp="HandleDialogWindowKeyUp"
    Title="GuidFacWindow"
    SizeToContent="WidthAndHeight"
    WindowStyle="None"
    BorderThickness="1"
    d:DesignHeight="180"
    d:DesignWidth="600"
    mc:Ignorable="d">
  <Border BorderBrush="{DynamicResource {x:Static vsshell:VsBrushes.ActiveBorderKey}}" BorderThickness="1">
    <Grid Background="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowBackgroundKey}}">
      <Grid.Resources>
        <ResourceDictionary>
          <ResourceDictionary.MergedDictionaries>
            <ResourceDictionary Source="pack://application:,,,/GuidFac;component/Resources/Styles.xaml" />
            <ResourceDictionary Source="pack://application:,,,/GuidFac;component/Resources/Styles.ListboxItem.NoHover.xaml" />
          </ResourceDictionary.MergedDictionaries>
          <Thickness x:Key="ButtonMargin">5,0,5,0</Thickness>
          <Style x:Key="ToggleButtonLikeRadioButtonStyle" TargetType="{x:Type RadioButton}">
            <!--<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>-->
            <Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.ActiveBorderKey}}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static vsshell:VsBrushes.ActiveBorderKey}}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.AutoHideTabTextKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="2"/>
            <Setter Property="Margin" Value="{StaticResource ButtonMargin}"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Template">
              <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                  <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                    <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                  </Border>
                  <ControlTemplate.Triggers>
                    <Trigger Property="IsChecked" Value="true">
                      <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static vsshell:VsBrushes.HighlightKey}}"/>
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="true">
                      <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static vsshell:VsBrushes.ActiveBorderKey}}"/>
                      <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static vsshell:VsBrushes.AutoHideTabTextKey}}"/>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="true">
                      <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowBackgroundKey}}"/>
                      <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowBackgroundKey}}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="false">
                      <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowBackgroundKey}}"/>
                      <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowBackgroundKey}}"/>
                      <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource {x:Static vsshell:VsBrushes.AutoHideTabTextKey}}"/>
                    </Trigger>
                  </ControlTemplate.Triggers>
                </ControlTemplate>
              </Setter.Value>
            </Setter>
          </Style>
          <Style x:Key="ToggleButtonStyle" TargetType="{x:Type ToggleButton}">
            <!--<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>-->
            <Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.ActiveBorderKey}}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static vsshell:VsBrushes.ActiveBorderKey}}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.AutoHideTabTextKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Width" Value="{Binding DesiredSize.Height, Mode=OneWay, RelativeSource={RelativeSource Self}}"/>
            <Setter Property="Margin" Value="{StaticResource ButtonMargin}"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="Template">
              <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                  <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                    <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                  </Border>
                  <ControlTemplate.Triggers>
                    <Trigger Property="IsChecked" Value="true">
                      <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static vsshell:VsBrushes.HighlightKey}}"/>
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="true">
                      <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static vsshell:VsBrushes.ActiveBorderKey}}"/>
                      <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static vsshell:VsBrushes.AutoHideTabTextKey}}"/>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="true">
                      <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowBackgroundKey}}"/>
                      <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowBackgroundKey}}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="false">
                      <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowBackgroundKey}}"/>
                      <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowBackgroundKey}}"/>
                      <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource {x:Static vsshell:VsBrushes.AutoHideTabTextKey}}"/>
                    </Trigger>
                  </ControlTemplate.Triggers>
                </ControlTemplate>
              </Setter.Value>
            </Setter>
          </Style>
        </ResourceDictionary>
      </Grid.Resources>
      <Grid.RowDefinitions>
        <RowDefinition Height="*"/>
        <RowDefinition Height="Auto" />
      </Grid.RowDefinitions>
      <ListView x:Name="listViewFormats" Background="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowBackgroundKey}}"
                MouseDoubleClick="OnListViewFormatsMouseDoubleClick"
                Margin="2" BorderThickness="0" ScrollViewer.HorizontalScrollBarVisibility="Hidden">
      </ListView>
      <StatusBar Grid.Row="1"
                 Background="{DynamicResource {x:Static platformUI:EnvironmentColors.StatusBarDefaultBrushKey}}"
                 Foreground="{DynamicResource {x:Static platformUI:EnvironmentColors.StatusBarDefaultTextBrushKey}}"
                 FontSize="{DynamicResource {x:Static vsshell:VsFonts.EnvironmentFontSizeKey}}"
                 FontFamily="{DynamicResource {x:Static vsshell:VsFonts.EnvironmentFontFamilyKey}}" >
        <!--<StatusBar.Resources>
          <Style TargetType="StatusBarItem">
            <Style.Setters>
              <Setter Property="Background" Value="Transparent" />
            </Style.Setters>
          </Style>
        </StatusBar.Resources>-->
        <StatusBarItem DockPanel.Dock="Right" Margin="-3,0,-3,0">
          <UniformGrid x:Name="radioButtonsGroupPanel" Columns="3">
            <RadioButton x:Name="radioButtonLower"
                       Grid.Column="1"
                       Width="{Binding ActualHeight, Mode=OneWay, RelativeSource={RelativeSource Self}}"
                       Style="{StaticResource ToggleButtonLikeRadioButtonStyle}"
                       Content="a"
                       GroupName="mode"
                       Checked="HandleRadioButtonChecked" />
            <RadioButton x:Name="radioButtonUpper"
                       Grid.Column="2"
                       Style="{StaticResource ToggleButtonLikeRadioButtonStyle}"
                       Content="A"
                       GroupName="mode"
                       Checked="HandleRadioButtonChecked" />
            <RadioButton x:Name="radioButtonBoth"
                       Grid.Column="3"
                       Style="{StaticResource ToggleButtonLikeRadioButtonStyle}"
                       Content="aA"
                       GroupName="mode"
                       Checked="HandleRadioButtonChecked" />
          </UniformGrid>
        </StatusBarItem>
        <StatusBarItem DockPanel.Dock="Right">
          <Separator Style="{StaticResource {x:Static StatusBar.SeparatorStyleKey}}" Height="{Binding ActualHeight, ElementName=radioButtonsGroupPanel}"/>
        </StatusBarItem>
        <StatusBarItem DockPanel.Dock="Right" Margin="0,0,-3,0">
          <ToggleButton Style="{StaticResource ToggleButtonStyle}"
                        Name="toggleButtonSetClipboard"
                        ToolTip="Auto set clipboard to GUID value when GUID gets inserted (Hotkey: C)"
                        Width="{Binding ActualHeight, ElementName=radioButtonsGroupPanel, Mode=OneWay}">
            <Viewbox>
              <Canvas x:Name="Layer_1_5"
                      Height="16" Width="16">
                <Rectangle Width="11" Height="13" Canvas.Left="2.5" Canvas.Top="1.5" Stretch="Fill" StrokeLineJoin="Round" Stroke="{DynamicResource {x:Static vsshell:VsBrushes.AutoHideTabTextKey}}" Fill="#00FFFFFF"/>
                <Path Width="5" Height="1" Canvas.Left="4.5" Canvas.Top="3.5" Stretch="Fill" StrokeLineJoin="Round" Stroke="{DynamicResource {x:Static vsshell:VsBrushes.AutoHideTabTextKey}}" Data="M 5,4L 9,4"/>
                <Path Width="7" Height="1" Canvas.Left="4.5" Canvas.Top="5.5" Stretch="Fill" StrokeLineJoin="Round" Stroke="{DynamicResource {x:Static vsshell:VsBrushes.AutoHideTabTextKey}}" Data="M 5,6L 11,6"/>
                <Path Width="4" Height="1" Canvas.Left="4.5" Canvas.Top="7.5" Stretch="Fill" StrokeLineJoin="Round" Stroke="{DynamicResource {x:Static vsshell:VsBrushes.AutoHideTabTextKey}}" Data="M 5,8L 8,8"/>
                <Path Width="7" Height="1" Canvas.Left="4.5" Canvas.Top="9.5" Stretch="Fill" StrokeLineJoin="Round" Stroke="{DynamicResource {x:Static vsshell:VsBrushes.AutoHideTabTextKey}}" Data="M 5,10L 11,10"/>
                <Path Width="7" Height="1" Canvas.Left="4.5" Canvas.Top="11.5" Stretch="Fill" StrokeLineJoin="Round" Stroke="{DynamicResource {x:Static vsshell:VsBrushes.AutoHideTabTextKey}}" Data="M 5,12L 11,12"/>
              </Canvas>
            </Viewbox>
          </ToggleButton>
        </StatusBarItem>
        <StatusBarItem Content="Press 'Space' to generate new GUID" FontStyle="Italic"
                       HorizontalContentAlignment="Stretch"
                       Foreground="{DynamicResource {x:Static vsshell:VsBrushes.AutoHideTabTextKey}}"/>
        <!--<Rectangle Width="1" Margin="5,0,8,0" Stroke="{DynamicResource {x:Static vsshell:VsBrushes.ActiveBorderKey}}" Grid.Column="1" />-->
      </StatusBar>
    </Grid>
  </Border>
</ui:DialogWindow>
